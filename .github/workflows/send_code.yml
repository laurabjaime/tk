          import http.client
          import json
          import os

          # API configuration
          API_HOST = "eu-central-1.taktile-org.decide.taktile.com"
          ENDPOINT_LIST_FLOWS = "/run/api/v1/flows/list-decision-graphs/sandbox/decide"
          ENDPOINT_GET_GRAPH = "/run/api/v1/flows/get-decision-graph/sandbox/decide"
          ENDPOINT_UPDATE = "/run/api/v1/flows/patch-decision-graph/sandbox/decide"

          api_key = os.getenv("API_KEY")
          if not api_key:
              raise ValueError("ERROR: API_KEY is empty")

          headers = {
              "X-Api-Key": api_key,
              "accept": "application/json",
              "Content-Type": "application/json"
          }

          # Create connection
          conn = http.client.HTTPSConnection(API_HOST)

          # Defining functions to get flow_id, node_id from code_nodes by name
          def flow_ids(org_name):
              """Retrieve all flow_id from the organization."""
              payload = json.dumps({
                  "data": {"org_name": org_name},
                  "metadata": {"version": "v1.0", "entity_id": "string"},
                  "control": {"execution_mode": "sync"}
              })
              conn.request("POST", ENDPOINT_LIST_FLOWS, payload, headers)
              res = conn.getresponse()
              data = res.read()
              response_json = json.loads(data.decode("utf-8"))
              list_decision_flows=dict(response_json)
              flow_ids =[]
              for i in range(len(list_decision_flows['data']['flows'])):
                  flow_ids.append(list_decision_flows['data']['flows'][i]['flow_id'])
              return flow_ids

          def node_ids(org_name):
              """Retrieve all node_id from the code_nodes of each flow"""
              flows = flow_ids(org_name)
              ans = {}
              for flow_id in flows:
                  payload = json.dumps({
                      "data": {"flow_id": flow_id},
                      "metadata": {"version": "v1.0", "entity_id": "string"},
                      "control": {"execution_mode": "sync"}
                  })
                  conn.request("POST", ENDPOINT_GET_GRAPH, payload, headers)
                  res = conn.getresponse()
                  data = res.read()
                  response_json = json.loads(data.decode("utf-8"))
                  get_decision_flows=dict(response_json)
                  for i in range(len(get_decision_flows['data']['graph'])):
                      if get_decision_flows['data']['graph'][i]['node_type']=='code_node':
                          node_id = get_decision_flows['data']['graph'][i]['node_id']
                          if get_decision_flows['data']['graph'][i]['node_name'].lower() in ans:
                              ans[get_decision_flows['data']['graph'][i]['node_name'].lower()].append((flow_id,node_id))
                          else:
                              ans[get_decision_flows['data']['graph'][i]['node_name'].lower()] = [(flow_id,node_id)]

              return ans

          # Organization name
        #   org_name = os.getenv("ORG_NAME")
          org_name = "NB36"
          print(org_name)
          if not org_name:
              raise ValueError("ERROR: ORG_NAME is empty!")
          
          # Node codes available
          nodes_available = node_ids(org_name)

          # List of detected files
          python_files = os.getenv("PYTHON_FILES", "").split()
          if not python_files:
              raise ValueError("ERROR: No Python files found!")

          print(f"Found Python files: {python_files}")

          # Finding flow_id and node_id for each file name = code name
          for file_name in python_files:
              name = f"{file_name.replace('.py', '').lower()}"
              env_var = f"{file_name.replace('.py', '').upper()}_CODE"
              src_code = os.getenv(env_var)
              aux = nodes_available[name]
              for i in range(len(aux)):
                  flow_id = aux[i][0]
                  node_id = aux[i][1]
                  payload = json.dumps({
                      "data": {
                          "flow_id": flow_id,
                          "node_id": node_id,
                          "src_code": src_code
                      },
                      "metadata": {
                          "version": "v1.0",
                          "entity_id": "string"
                      },
                      "control": {
                          "execution_mode": "sync"
                      }
                  })
    
                  print(f"Sending {file_name} (flow_id: {flow_id}, node_id: {node_id}) to API...")
                  conn.request("POST", ENDPOINT_UPDATE, payload, headers)
                  res = conn.getresponse()
                  data = res.read()
                  print(data.decode("utf-8"))
                  response_json = json.loads(data.decode("utf-8"))

          print("All files processed!")
          EOF
