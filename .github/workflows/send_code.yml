name: Send Python Code to API

on:
  push:
    branches:
      - main  # Merge to main

jobs:
  send_code_to_api:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Debug - Check API Key
        run: |
          if [ -z "${{ secrets.API_KEY }}" ]; then
            echo "Error: API_KEY is missing from GitHub Secrets!"
            exit 1
          else
            echo "API_KEY is properly set!"
          fi

      - name: Read Python files and store them as strings
        run: |
          SUMMARIZE_CODE=$(awk '{printf "%s\\n", $0}' summarize.py | paste -sd '' | sed 's/\\\\n/\\n/g' | sed 's/\n/\\n/g')
          MULTIPLY_CODE=$(awk '{printf "%s\\n", $0}' multiply.py | paste -sd '' | sed 's/\\\\n/\\n/g' | sed 's/\n/\\n/g')
          
          # SUMMARIZE_CODE=$(awk '{printf "%s\\n", $0}' summarize.py)
          # MULTIPLY_CODE=$(awk '{printf "%s\\n", $0}' multiply.py)

          # If variables are empty, set a default value
          if [ -z "$SUMMARIZE_CODE" ]; then SUMMARIZE_CODE="print('Error: code not found')"; fi
          if [ -z "$MULTIPLY_CODE" ]; then MULTIPLY_CODE="print('Error: code not found')"; fi

          echo "SUMMARIZE_CODE=${SUMMARIZE_CODE}" >> $GITHUB_ENV
          echo "MULTIPLY_CODE=${MULTIPLY_CODE}" >> $GITHUB_ENV
        
      - name: Debug - Check variables before sending
        run: |
          echo "SUMMARIZE_CODE: ${{ env.SUMMARIZE_CODE }}"
          echo "MULTIPLY_CODE: ${{ env.MULTIPLY_CODE }}"

      - name: Check if variables are empty
        run: |
          if [ -z "${{ env.SUMMARIZE_CODE }}" ]; then
            echo "Error: SUMMARIZE_CODE is empty!"
            exit 1
          fi

          if [ -z "${{ env.MULTIPLY_CODE }}" ]; then
            echo "Error: MULTIPLY_CODE is empty!"
            exit 1
          fi

      - name: Send code to API
        env:
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          python - <<EOF
          import http.client
          import json
          import os

          conn = http.client.HTTPSConnection("eu-central-1.taktile-org.decide.taktile.com")
          api_key = os.getenv("API_KEY") # Import from  GitHub Secrets

          if not api_key:
              raise ValueError("Error: API_KEY is empty!")
          print("API Key loaded successfully:", api_key[:5] + "*****")

          headers = {
              "X-Api-Key": api_key,
              "accept": "application/json",
              "Content-Type": "application/json"
          }

          summarize_code = os.getenv("SUMMARIZE_CODE")
          multiply_code = os.getenv("MULTIPLY_CODE")

          if not summarize_code or summarize_code.strip() == "":
              raise ValueError("Error: SUMMARIZE_CODE is empty!")

          if not multiply_code or multiply_code.strip() == "":
              raise ValueError("Error: MULTIPLY_CODE is empty!")

          summarize_payload = json.dumps({
              "data": {
                  "flow_id": "06457ab1-3367-43c3-9e6b-4dbaa88d1b1b",
                  "node_id": "affc68e2-f4e7-40b2-a8e4-4f08ac9cc643",
                  "src_code": summarize_code
              },
              "metadata": {
                  "version": "v1.0",
                  "entity_id": "string"
              },
              "control": {
                  "execution_mode": "sync"
              }
          })

          multiply_payload = json.dumps({
              "data": {
                  "flow_id": "06457ab1-3367-43c3-9e6b-4dbaa88d1b1b",
                  "node_id": "affc68e2-f4e7-40b2-a8e4-4f08ac9cc123",
                  "src_code": multiply_code
              },
              "metadata": {
                  "version": "v1.0",
                  "entity_id": "string"
              },
              "control": {
                  "execution_mode": "sync"
              }
          })

          # Send SUMMARIZE_CODE
          conn.request("POST", "/run/api/v1/flows/patch-decision-graph/sandbox/decide", summarize_payload, headers)
          res = conn.getresponse()
          print("Summarize response:", res.status, res.read().decode("utf-8"))

          # Send MULTIPLY_CODE
          conn.request("POST", "/run/api/v1/flows/patch-decision-graph/sandbox/decide", multiply_payload, headers)
          res = conn.getresponse()
          print("Multiply response:", res.status, res.read().decode("utf-8"))
          EOF
